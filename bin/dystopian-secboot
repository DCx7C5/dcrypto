#!/bin/sh
# shellcheck shell=sh
# shellcheck disable=SC2001
# shellcheck disable=SC2034

if [ "$(id -u)" -ne 0 ]; then
    echo "User must be root"
    exit 1
fi

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
VAR_LIB_FILE="/usr/lib/dystopian-tools/variables.sh"
DB_LIB_FILE="/usr/lib/dystopian-tools/secboot-db.sh"
HELPER_LIB_FILE="/usr/lib/dystopian-tools/helper.sh"
SSL_LIB_FILE="/usr/lib/dystopian-tools/ssl.sh"
GPG_LIB_FILE="/usr/lib/dystopian-tools/gpg.sh"
SECBOOT_LIB_FILE="/usr/lib/dystopian-tools/secboot.sh"


[ -f "$VAR_LIB_FILE" ] || VAR_LIB_FILE="$SCRIPT_DIR/../lib/variables.sh"
[ -f "$DB_LIB_FILE" ] || DB_LIB_FILE="$SCRIPT_DIR/../lib/secboot-db.sh"
[ -f "$HELPER_LIB_FILE" ] || HELPER_LIB_FILE="$SCRIPT_DIR/../lib/helper.sh"
[ -f "$SSL_LIB_FILE" ] || SSL_LIB_FILE="$SCRIPT_DIR/../lib/ssl.sh"
[ -f "$GPG_LIB_FILE" ] || GPG_LIB_FILE="$SCRIPT_DIR/../lib/gpg.sh"
[ -f "$SECBOOT_LIB_FILE" ] || SECBOOT_LIB_FILE="$SCRIPT_DIR/../lib/secboot.sh"


# Source library files
# shellcheck source=../lib/variables.sh
[ -f "$VAR_LIB_FILE" ] && . "$VAR_LIB_FILE"
# shellcheck source=../lib/secboot-db.sh
[ -f "$DB_LIB_FILE" ] && . "$DB_LIB_FILE"
# shellcheck source=../lib/helper.sh
[ -f "$HELPER_LIB_FILE" ] && . "$HELPER_LIB_FILE"
# shellcheck source=../lib/ssl.sh
[ -f "$SSL_LIB_FILE" ] && . "$SSL_LIB_FILE"
# shellcheck source=../lib/gpg.sh
[ -f "$GPG_LIB_FILE" ] && . "$GPG_LIB_FILE"
#shellcheck source=../lib/secboot.sh
[ -f "$SECBOOT_LIB_FILE" ] && . "$SECBOOT_LIB_FILE"
#trap on_error_or_exit && exit 1 INT TERM HUP
trap on_exit EXIT

help() {
    cat <<EOF
Usage: $0 <command> [options]

Description:
  Manage Secure Boot setup, key enrollment, and status reporting.


Commands:

  init                                Initialize secureboot environment, either loads or creates it
    --compat                            Create keys using broadly compatible (rsa4096 instead of secpr384) settings. (Default: false)
    --tpm                               Use TPM-backed keys if supported. (Default: false)
    --force-create

  status                              Show current Secure Boot state and enrolled keys.
    --verify

  enroll
    --ms                                Fetch and enroll secureboot keys with Microsoft-provided certificates where applicable.
    --mok                               Enroll Machine Owner Key (MOK).


Other Commands:
  -v | --verbose                      Show verbose status informations
  -q | --quiet                        No output informations
  --debug                             Show debug status informations
  version                             Show version information
  help                                Show this help message


Examples:
  # Initialize Secure Boot with broadly compatible keys
  $0 init --compat

  # Enroll Microsoft and db certificates
  $0 enroll --ms --db

  # Show current Secure Boot status
  $0 status


Files:
  Secure Boot directory: $DS_DIR/
  Microsoft objects dir: $DC_MS_DIR/


Database:
  Secure Boot database file: $DS_DB


Notes:
  • Requires root privileges for key creation and enrollment
  • May use efitools, openssl, bootctl, and system firmware variables
  • Key enrollment modifies UEFI variables; ensure you have backups and recovery options

EOF
}

VERBOSE=0
DEBUG=0
QUIET=0
RAND="$(od -An -N2 -i /dev/urandom | tr -d ' ' | head -c 4)"


preparse "$0" "$@"
set --
old_IFS=$IFS
IFS='||'
for a in $DC_POS_ARGS; do
    [ -n "$a" ] && set -- "$@" "$a"
done
IFS=$old_IFS


case "$1" in
    init)
        shift
        compat="" tpm=""
        while [ $# -gt 0 ]; do
            case "$1" in
                --compat|--compatibility|-c) compat="true"; shift;;
                --tpm|-tpm|-t) tpm="true"; shift;;
                --force-create|--create|-fc|--fc) force_create="true"; shift;;
                -help|--help|-h) shorthelp "init"; exit 0;;
                *) echoe "Unknown option: $1"; shorthelp "init"; exit 1;;
            esac
        done
        host_sync ""
        ;;
    -h|--help|-help) help; exit 0;;
    *) echoe "Unknown command: $1"; help; exit 1;;
esac